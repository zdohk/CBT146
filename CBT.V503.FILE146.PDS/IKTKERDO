


1. IBM MVS/TSO KERMIT

Program:      John Chandler (Harvard/Smithsonian Center for Astrophysics); con-
              tributions from Vace Kundakci and Daphne Tzoar (Columbia U),  Bob
              Shields  (U.  Maryland),  Victor Lee (Queens U.), Gary Bjerke (U.
              Texas  at  Austin),  Greg  Small  (UC  Berkeley),  Clark  Frazier
              (Harvard  Bus. Sch.), Bob Bolch and Steve Blankinship (Triangle),
              Ron Rusnak (U. Chicago), Roger Fajman and Dale White (NIH), Andre
              Pirard (U. Liege)
Language:     IBM/370 Assembler
Documentation:
              John Chandler (CfA)
Version:      4.0 (88/1/31)
Date:         1988 February


Kermit-TSO Capabilities At A Glance:

  Local operation:                   No
  Remote operation:                  Yes
  Transfers text files:              Yes
  Transfers binary files:            Yes
  Wildcard send:                     Yes
  ¬X/¬Z interruption:                Yes (through micro)
  Filename collision avoidance:      Yes
  Can time out:                      Yes
  8th-bit prefixing:                 Yes
  Repeat count prefixing:            Yes
  Alternate block checks:            Yes
  Terminal emulation:                No
  Communication settings:            No
  Transmit BREAK:                    No
  Transaction logging:               Yes
  Session logging:                   No
  Raw transmit:                      Yes (no prompts)
  Sliding window:                    No
  Long packets:                      Yes
  Act as server:                     Yes
  Talk to server:                    Yes
  Advanced server functions:         Yes
  Advanced commands for servers:     Yes
  Local file management:             Yes
  Handle Attribute Packets:          Yes
  Command/init files:                Yes
  Command macros:                    No

Kermit-TSO is a member of the generic Kermit-370 family and shares most of  the
features and capabilities of the group.  As its name implies, Kermit-TSO is the
version of Kermit-370 that runs  under  the  MVS/TSO  operating  system.    The
primary  documentation  for  Kermit-TSO  is actually the chapter on Kermit-370,
which describes general properties; the present chapter assumes the  reader  is
familiar  with  that material.  Only the details specific to TSO operation will
be discussed here, e.g., command syntax relating to the TSO file system or com-
mands not offered in general by Kermit-370.


TSO Specifics of Kermit-370:

  Global INIT file:                  'SYS1.KERMINI'
  User INIT file:                    KERMINI
  Debug packet log:                  KER.LOG
  Server reply log:                  KER.REPLY
  Maximum packet size:               1913
  Maximum disk LRECL:                32756


1.1. The MVS/TSO File System

The  features  of  the TSO file system of greatest interest to Kermit users are
the format of file specifications (filespecs) and the concept of records.   The
latter is described in the Kermit-370 chapter.

The MVS/TSO filespec (called the data set name or DSN) takes the form of tokens
(known as qualifiers) of up to 8 alphanumeric  characters  each,  separated  by
periods.    Each qualifier must begin with an alphabetic or national character.
The total length must be no more than 44 characters, including periods.  To  be
precise,  a  DSN may contain uppercase letters, digits, and the special charac-
ters "$" (dollar sign), "#" (pound sign), "@" (at sign), and  "-"  (hyphen)  in
addition to the separating periods.  Other characters may be not be included.

There  is  another, structural restriction on data set names from the fact that
TSO data sets are all cataloged.  In a standard MVS catalog, each qualifier  of
each  DSN is associated with an index of the same name.  The index is a hierar-
chical catalog component which points downward either to a list  of  next-level
indices  or to a data set, but never to both.  Consequently, a cataloged DSN is
a chain of indices corresponding one-for-one with DSN qualifers, and  the  last
index  is  a  pointer  to the data set itself.  While there may be many indices
with the same name, no two such duplicates may both  be  chained  to  the  same
next-higher-level  index,  so  that,  if  DSN's  are  considered  as strings of
qualifiers (not of characters), no DSN can be a major substring of  any  other.
For  example,  if  the  name  'A.BB.C'  exists  in the catalog, then 'A.BB' and
'A.BB.C.X' are illegal, but 'A.B', 'A.BB.Y', 'A.BBB',  and  'A.BB.BB'  are  all
legal.

A  DSN  given  in  its entirety (as in the foregoing examples) is called "fully
qualified" and must be enclosed in single quotes when entered in TSO.  However,
by  convention (and by definition) the first qualifier of each data set belong-
ing to a given user must be the user's logon ID, and, by default,  that  ID  is
the  assumed  prefix in TSO when a DSN is not enclosed in quotes.  In practice,
then, names are abbreviated by omitting the quotes and the prefix.    The  most
common  type  of name, in fact, consists of the prefix plus two more qualifiers
giving the data set's name and type, respectively,  so  that  many  files  have
DSN's  that  correspond  exactly  to  the  canonical Kermit representation of a
filespec.  For instance, TEST.FORT is the source of  a  Fortran  program  named
TEST, and its fully qualified DSN would be '<userid>.TEST.FORT', where <userid>
is the owner's logon ID.

While this description is complete as far as it goes,  it  omits  an  important
feature  that is widely used in organizing files under MVS and TSO, namely, the
partitioned data set (PDS).  A PDS is a data set like any other, except that it
has  members,  each of which can usually be treated as a file in its own right.
In fact, with QSAM (the file access method employed by Kermit  and  many  other
applications),  only  members,  and  not the whole PDS, may be read or written.
Thus, the term "file", as used in this chapter and the Kermit-370 chapter,  may
refer  to  either  a PDS member or an ordinary data set, but not to a PDS.  The
notation for a PDS member consists of the member name enclosed  in  parentheses
and  appended  to the DSN (and the whole enclosed in quotes if the DSN is fully
qualified).  For example, if the Fortran program TEST were copied  into  a  PDS
called DEBUG.FORT, it would then be known as

    DEBUG.FORT(TEST)

Although the member name is written together with the DSN, it and the surround-
ing parentheses are not really part of the DSN and are not counted  toward  the
44-character  limit.   Still, a member name must conform to the rules for a DSN
qualifier and, in addition, must not contain any hyphens.

All these properties of DSN's come into play when a file is being  received  by
Kermit-TSO because a valid DSN must be generated for the new data set.  For ex-
ample, any invalid character in the supplied filespec is replaced  by  a  pound
sign  (or  converted  to  uppercase  if  it is a lowercase letter).  Also, each
qualifier (and the member name, if any) is prefixed with a  pound  sign  if  it
does  not already begin with an alphabetic or national character and then shor-
tened, if necessary,  to  eight  characters.    If  no  filespec  is  supplied,
Kermit-TSO  creates  a  default DSN of "$.$".  The DSN is expanded to its fully
qualified form and then truncated at 44 characters, if need be.

The DSN prefix, which defaults to the user's logon ID, is similar to  a  device
specification on microcomputer systems: it selects an area of disk storage, and
it usually need not be specified.  In some ways, the prefix is also like a disk
directory  designator,  since  the  file system structure is hierarchical.  For
this reason, the Kermit concept of the "working directory" is  equated  with  a
particular DSN prefix under Kermit-TSO.  The current "working directory" is the
collection of all data sets whose names begin with the current prefix, and file
transfers take place preferentially to and from that area (i.e., unless a fully
qualified DSN is given).

To provide compatibility with other operating systems, when Kermit-TSO sends  a
file,  it  ordinarily  makes a file header with only the last two qualifiers of
the full DSN (or only the member name in the case of a PDS  member).    On  the
other  hand,  extra  information may be added by way of the SET FOREIGN subcom-
mand.

Kermit-TSO allows a group of files to be specified in a single filespec by  in-
cluding  the  special  "wildcard"  character  "*",  which matches any string of
characters (even a null string) starting at a new DSN qualifier.   Only  one  *
may  be used in a filespec.  Also, the * may not be used for the member name of
a PDS (nor for any part of a PDS name).  Here are some examples:

  *.COBOL   All files of type COBOL (all COBOL source  files)  in  the  current
            working directory.

  BATCH*H.FORT
            All files in the current directory which begin with  the  qualifier
            BATCH   and  which  end  with  H.FORT.    This  would  not  include
            BATCH.FORT, however.

TSO files, like those in other IBM 370 systems, are  record-oriented  (see  the
introduction  to the Kermit-370 chapter).  In particular, TSO files are charac-
terized by record format (RECFM), which may be fixed-length, varying-length, or
undefined-length;  by  maximum record length (LRECL); and by maximum block size
(BLKSIZE).  Fixed-length and varying-length may be (and, under  Kermit,  always
are)  combined  into  blocks, but undefined-length records may not.  Indeed, by
convention, they have no logical record length,  only  a  maximum  block  size.
Records  in TSO files may be up to 32760 bytes long, but varying-length records
use four bytes to specify the length and have an effective limit of 32756.

Another file system feature of occasional interest is the  means  of  reporting
errors.  When Kermit-TSO encounters a disk error, it attempts to prepare an ex-
planatory message for inclusion in the STATUS report.  The  primary  method  is
the standard SYNADAF macro.


1.2. Program Operation

At  startup time, Kermit-TSO looks for two initialization files, 'SYS1.KERMINI'
and '<userid>.KERMINI' (where, as before, <userid> is  the  user's  logon  ID).
The  latter  file would also be known as just KERMINI.  The file 'SYS1.KERMINI'
would be maintained by a systems programmer, but KERMINI would be maintained by
the user.

Two parameters in the user's profile (the character delete and line delete) are
disabled during protocol mode (and restored afterwards) to prevent any conflict
in  case either of these characters has been defined to be printable.  The set-
tings in effect when Kermit starts up are saved as a sort  of  "normal"  status
snapshot  (as  opposed  to the "protocol" status just described).  The protocol
status is selected whenever Kermit enters protocol mode, and the normal  status
is  selected  when Kermit leaves protocol mode.  Note: if Kermit is interrupted
in the midst of a transfer or while in server mode, these  parameters  will  be
left with peculiar settings (namely, the protocol status), and they may need to
be restored by hand.

Although TSO does not allow an application program to take control of  terminal
synchronization  on  "TTY"  lines, the various full-screen emulation front ends
are quite a different matter.  The standard IBM handshake (XON) is unnecessary,
for  example,  with  a 7171 or 4994 because the front end itself turns the line
around with essentially no delay in transparent mode.  Thus, handshaking should
be suppressed for "SERIES1" devices (the micro Kermit should have HANDSHAKE set
OFF, and Kermit-TSO should have  HANDSHAKE  set  to  0).    Since  the  generic
Kermit-370  default  handshake  (XON) is retained in Kermit-TSO, the subcommand
"SET HANDSHAKE 0" is a good candidate for inclusion the  KERMINI  file  of  any
user who habitually uses "SERIES1" lines.


Interactive Operation:

To  run Kermit-TSO interactively, invoke the program from TSO by typing KERMIT.
When you see the prompt,

    Kermit-TSO>

you may type a Kermit subcommand.  When the subcommand completes, Kermit issues
another  prompt.    The cycle repeats until you exit from the program.  For ex-
ample:

    KERMIT

    Kermit-TSO Version 4.0 (88/1/31)
    Enter ? for a list of valid commands

    Kermit-TSO>send foo.*

      Files beginning with FOO are sent

    Kermit-TSO>receive test.spss

      File is received and called TEST.SPSS

    Kermit-TSO>exit


Command Line Invocation:

Kermit-TSO may also be invoked with command line arguments from TSO.   The  ar-
guments  are interpreted as a subcommand to be executed by Kermit after comple-
tion of the initialization.  For instance:

    KERMIT send test.fort

Kermit will exit and return to TSO after completing the specified subcommand.


CLIST Operation:

Like other TSO programs, Kermit-TSO may be invoked from a CLIST.    Subcommands
can  be  passed to Kermit using the program input stack and/or command line ar-
guments.  For example, to start up Kermit-TSO and have it act as a server,  in-
clude the line:

    KERMIT server

To  pass  more  than one subcommand, they must be stacked in the order in which
they are to be executed.  To start up a Kermit-TSO server with a three  charac-
ter CRC, create and stack a file with the following:

    set block 3
    server

and  then  invoke  Kermit.    Like  many  utility programs, Kermit-TSO uses the
GETLINE/PUTLINE service routines for terminal I/O,  and  the  nominally  inter-
active  subcommands can thus be supplied under program control.  Another way of
setting up multiple subcommands would be to collect the subcommands into a TAKE
file  and  then  issue  the  TAKE  subcommand via the command line.  Of course,
CLIST's may be executed from Kermit, either directly or from a TAKE  file,  and
CLIST's  in turn may freely issue Kermit subcommands.  The subcommand KERMIT is
especially useful in this context for distinguishing  Kermit  subcommands  from
TSO commands.


Server mode:

Command  execution  in server mode is different in several respects from normal
operation.  First of all, some Kermit subcommands are not allowed (see the list
of  subcommands  in  the  Kermit-370 chapter).  Moreover, command errors always
terminate any active TAKE file.  Also, commands run in  a  special  environment
with  the User Profile temporarily modified.  Another difference is that Kermit
intercepts terminal I/O as much as possible and transmits the data to the local
Kermit as text packets.  The problem with this redirection is that some MVS/TSO
commands issue terminal I/O directly, so that some messages never appear to the
local Kermit (except, perhaps, as bad packets).


1.3. Kermit-TSO Subcommands

Kermit-TSO  supports all the subcommands described in the corresponding section
of the Kermit-370 chapter.  In addition, there is the  system-specific  subcom-
mand  TSO, which is just a synonym for the generic HOST subcommand.  TSO can be
issued as a remote Kermit command when Kermit-TSO is in server mode.  Also, the
END subcommand is available as a synonym for EXIT and QUIT.

The remainder of this section concentrates on the subcommands that have special
form or meaning for Kermit-TSO.  See also the chapter on Kermit-370 for further
details.


                              THE SEND SUBCOMMAND

Syntax: SEND filespec ¢foreign-filespec|

The SEND subcommand causes a file or file group to be sent from TSO to the Ker-
mit on the other system.  DSN prefixing is done on the filespec  in  the  usual
way (see also the CWD subcommand).

filespec  may contain a wildcard "*".  If it does, then all matching files will
be sent, up to 711 files in all.

The foreign-filespec, if any, is used for the file header of the outgoing file,
replacing  the  usual  name.type  derived from the MVS/TSO filespec.  Normally,
this form of the SEND subcommand is used only  for  single  files  because  the
foreign-filespec  is  used only for the first file of a group (subsequent files
having default headers).

Although the file transfer cannot be cancelled from the TSO side, Kermit-TSO is
capable of responding to "cancel file" or "cancel batch" signals from the local
Kermit; these are typically entered by typing Control-X or  Control-Z,  respec-
tively.


                            THE RECEIVE SUBCOMMAND

Syntax: RECEIVE ¢filespec|

The  RECEIVE  subcommand  tells Kermit to receive a file or file group from the
other system.  You should then issue a SEND subcommand to the other Kermit.

A filespec in the subcommand indicates what name the incoming  file  should  be
given.  Wildcards may not be used.  If the filespec is invalid, Kermit-TSO will
suppress the transfer.  If the optional filespec is omitted (and, in any  case,
for  all  files  after  the  first  in a group) Kermit-TSO will use the name(s)
provided by the other Kermit.  If a name is not a legal  DSN,  Kermit-TSO  will
delete  excess characters, change illegal characters to pound signs, and so on,
to create a legal name.

When the record format is "F", any received  record  longer  than  the  logical
record  length  (LRECL)  will be truncated, and shorter records will be padded.
The padding character is a blank for text files and a null  for  binary  files.
Received  binary  (but  not  V-binary  or  D-binary)  files are treated as byte
streams and broken up into records all of the logical record length.   See  the
SET  FILE  TYPE,  SET  FILE LRECL, SET FILE BLKSIZE, and SET FILE RECFM subcom-
mands.

If an error occurs during the file  transfer,  as  much  of  the  file  as  was
received  is  saved on disk.  If the sending of a file is cancelled by the user
of the foreign system, Kermit-TSO will discard whatever had arrived, unless AP-
PEND is ON or INCOMPLETE is KEEP.

If  the  incoming file has the same name as an existing file (either a data set
or a PDS member), and WARNING is OFF, the original file  will  be  overwritten.
If WARNING is set ON, however, Kermit-TSO will protect the existing file in one
of two ways.  If the filespec was entered  with  the  subcommand,  Kermit  will
prompt  the  user  for  permission to overwrite the file.  If the filespec came
from the foreign Kermit, Kermit-TSO will change the incoming name so as not  to
obliterate the pre-existing file.  It attempts to find a unique name by succes-
sively modifying the original and checking for the existence of such a file  at
each  step.  The procedure operates on the second qualifier of the full DSN (or
the member name in the case of a PDS member) and begins  by  truncating  it  to
seven  characters,  if necessary, and then appends "0".  If a file by that name
exists, Kermit then replaces the "0" with a "1".  It continues in  this  manner
up to "9", and if an unused name cannot be found, the transfer fails.


                              THE SET SUBCOMMAND

Syntax: SET parameter ¢value|

The  SET subcommand establishes or modifies various parameters controlling file
transfers.  The following SET parameters are available in Kermit-TSO,  but  not
in Kermit-370 in general:
FILE
  BLKSIZE           Block size for incoming file.
  LRECL             Logical Record length for incoming file.
  RECFM             Record format for incoming files.
  SPACE             Allocation unit (in tracks) for incoming files.
  UNIT              Device type for incoming files.
  VOLUME            Disk pack for incoming files.
PREFIX              Default disk area.
TIMER               Determine whether Kermit-TSO should time out.


SET FILE BLKSIZE

Syntax: SET FILE BLKSIZE number

This  sets  the  block size for incoming files to a number from 1 to 32760.  In
the case of fixed-format files, this number is just an upper bound; the  actual
block  size  is  taken  to  be the largest multiple of the LRECL which does not
exceed this limit.  The default is 6233.


SET FILE LRECL

Syntax: SET FILE LRECL number

This sets the effective logical record length for incoming files  to  a  number
from 1 to 32756.  This parameter is not used for files of undefined record for-
mat.  Moreover, it is not exactly the same as the MVS/TSO LRECL, which is  four
more  than  the  actual  maximum  data  length for varying-length records.  The
default is 80.


SET FILE RECFM

Syntax: SET FILE RECFM option

This sets the record format to use for  incoming  files.    Valid  options  are
"Fixed",  "Varying"  (the  default),  and  "Undefined".  This parameter is thus
limited to a subset of the range of possibilities for the MVS/TSO  RECFM.    In
Kermit-TSO,  all  incoming  files  of fixed or varying format are automatically
blocked according to the current block size.  Fixed-format records  are  padded
or truncated, as needed, to the current LRECL.


SET FILE SPACE

Syntax: SET FILE SPACE number

This  sets  the  track allocation unit for incoming files to a number from 1 to
32760.  The default is 5.  Since data sets are allowed as many as  15  extents,
this default provides for files up to 75 tracks.


SET FILE UNIT

Syntax: SET FILE UNIT type

This  sets  the  device  type  or  group for incoming files.  Valid options are
installation-dependent.  The default is SYSDA, which is universally  available,
but  not necessarily desirable, since many installations restrict TSO data sets
to a particular set of disk volumes.  In such cases, there is  usually  a  unit
name  which  refers  only  to  those  TSO  volumes,  and  the  global INIT file
'SYS1.KERMINI' should set the file unit parameter to that name.


SET FILE VOLUME

Syntax: SET FILE VOLUME name

This  sets  the  disk  volume  for  incoming   files.      Valid   namess   are
installation-dependent,  but  are,  in  any case, no more than six alphanumeric
characters.  The default is blank (none); in that case, the system chooses  one
of the available volumes of the specified UNIT type.


SET PREFIX

Syntax: SET PREFIX ¢string|

This subcommand is equivalent to the CWD subcommand (q.v.).


SET TIMER

Syntax: SET TIMER ON or OFF

This specifies whether Kermit-TSO is to maintain a timer for each packet it ex-
pects to read.  The default is ON.  If the timer is enabled,  its  duration  is
set  by the SET SEND TIMEOUT subcommand initially and then set according to the
request of the other Kermit.


                              THE CWD SUBCOMMAND

Syntax: CWD ¢string or PDSname()|

The CWD (Change Working Directory) subcommand establishes  a  new  default  DSN
prefix  or turns prefixing off.  This facility is similar to, but not quite the
same as, the prefix defined in the User Profile.   The  string,  if  specified,
must  consist  of  one or more DSN qualifiers, and the first must already be an
index in the disk catalog.  Subsequent file transfers take place  to  and  from
the  corresponding  disk  area  whenever a fully qualified DSN (one enclosed in
quotes) is not given.  The initial prefix is the user's  logon  ID,  i.e.,  the
same  as the default prefix in the User Profile.  If no prefix is given in this
subcommand, then prefixing is no longer performed.  The user must be careful to
remember  the  distinction  between  the prefix defined for Kermit and that for
TSO.  Pure Kermit subcommands (like SEND and TAKE) always use the  former,  but
TSO commands (and the TSO-related subcommand TYPE) use the latter.

An  alternative  form  of  the  CWD  subcommand allows specifying the full (but
unquoted) name of a PDS followed by paired parentheses.  When such  a  "working
directory"  is  in use, a filespec other than a fully qualified DSN is taken to
be a member name within the PDS.  For that reason, this  form  should  be  used
cautiously,  since the Kermit-TSO log filespecs (such as KER.LOG and KER.REPLY)
would be treated the same way.  In particular, it is advisable to turn on debug
mode  only  when  the Kermit prefix is a partially qualified DSN (once started,
the log continues to the same data  set  regardless  of  what  happens  to  the
prefix).


                           THE DIRECTORY SUBCOMMAND

Syntax: DIRECTORY ¢filespec|

The  DIRECTORY  subcommand  uses the TSO LISTCAT command to display part of the
data set catalog, i.e., all data sets whose names begin with the qualifiers  in
the Kermit prefix (if any) concatenated with the given filespec (if any).


                              THE TSO SUBCOMMAND

Syntax: TSO text of command

Although  Kermit-TSO does not have a full set of its own subcommands for manag-
ing TSO files, it provides those services through the operating  system.    You
can  issue  any  TSO command, e.g., to list, type, rename or delete files, send
messages, and so on.  The TSO subcommand under Kermit is  synonymous  with  the
HOST subcommand.


1.4. How to build an executable version of Kermit-TSO

Before  attempting  to  build Kermit-TSO, look in the Kermit distribution under
both IK0KER and IKTKER for an installation document, as well as "beware", help,
and  update files, and read them first.  They will probably contain information
that is more current than what you see here.

Kermit-TSO consists at present of a large assembly (KERMIT.ASM, containing  the
Kermit  program)  and  a small one (DYNALC.ASM, containing a subroutine for al-
locating data sets).  Although DYNALC is a single file in the Kermit  distribu-
tion,  the  source  for  Kermit  itself  is  in  many  pieces, some generic for
Kermit-370 and some specific to TSO.  All the necessary pieces are sequenced in
columns  73-80 so that the numbers form a strictly increasing sequence when the
pieces are correctly "pasted" together.    It  is  important  to  preserve  the
original  sequence  numbers  so  that  updates,  if  any, can be applied to the
source.

To create a runnable version:

   1. Combine the following "ASM" files from the Kermit distribution  into
      a  single file with RECFM=F(B) and LRECL=80: IK0DOC, IK0MAC, IKTMAC,
      IK0DEF, IK0MAI, IK0CMD, IK0COM, IKTUTL, and IK0PRO.   The  resulting
      file  is  the  composite  source  for Kermit-TSO, called KERMIT.ASM.
      This source must retain the original  sequence  numbers  in  columns
      73-80 (in other words, be sure not to resequence the source acciden-
      tally by using the editor!)

   2. Copy or rename IKTDYN.ASM from the Kermit  distribution  to  a  file
      called DYNALC.ASM with RECFM=F(B) and LRECL=80.

   3. Assemble the source file(s).

   4. Create  the  executable load module KERMIT using the linkage editor.
      Kermit is designed to run as a command processor, and so it must  be
      placed  in  SYS1.CMDLIB or in a PDS concatenated to SYS1.CMDLIB (for
      example, via the STEPLIB command).

   5. If your site's ASCII/EBCDIC translation table for TTY lines does not
      conform to the one listed in the appendix (which in turn conforms to
      the one given in the IBM System/370 Reference Summary),  then  enter
      the   appropriate   SET   ATOE/ETOA/TATOE/TETOA   subcommands   into
      'SYS1.KERMINI'.  NOTE: If the ASCII/EBCDIC translation is not inver-
      tible, Kermit will not and cannot work.

In order to verify the operation of a new version of Kermit-TSO, you may run it
under TEST using the CP parameter.


1.5. What's New

Below is a list of the more important features in  Version  4.0  of  Kermit-TSO
added  since  the  release  of  TSO/3708 in May 1987.  Since Version 4.0 is the
first release of Kermit-370 for TSO, some of the "new"  features  are  actually
new only to the Columbia TSO distribution.

   1. Suppression of LINE and CHAR delete functions during protocol mode.

   2. Advanced  server  functions  and  subcommands for talking to another
      Kermit running in server mode.

   3. Long packet protocol.

   4. TYPE, ECHO,  XTYPE,  and  XECHO  subcommands  (the  last  two  being
      Series/1 analogs of the first two.)

   5. REMOTE  KERMIT  commands honored by TSO server, including SET, SHOW,
      TAKE, TDUMP, STATUS, HOST, TSO, CWD, DIR, and TYPE.

   6. TEST mode for debugging.

   7. Multi-column, two-level, selective SHOW display.

   8. Send and acknowledge attribute packets.

   9. Optionally append to, rather than replace, old data sets with dupli-
      cate names.

  10. Automatic detection of terminal controller type (TTY or SERIES1).

  11. SYNADAF message in cases of disk I/O error.


1.6. What's Missing

Work  on  Kermit-TSO will continue.  Features that need to be improved or added
include:

   - Detect file properties from Attribute packets  and  allow  overriding
     current parameter settings.  Also implement file archiving.

   - Add a SET REPEAT subcommand.

   - Finish  SET  LINE,  so that Kermit-TSO can be used as a local Kermit,
     connecting to a remote host over  an  alternate  communication  port.
     Add a CONNECT subcommand.

   - Compute file size for outgoing A-packets and implement the SPACE sub-
     command.

   - Reject files known (via  A-packets)  to  be  too  big  for  available
     storage.

   - Intercept all terminal output during protocol mode.

   - Allow wildcard notation for PDS members.
