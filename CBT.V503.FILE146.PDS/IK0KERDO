


1. IBM 370 KERMIT

Program:      John Chandler (Harvard/Smithsonian Center for Astrophysics); con-
              tributions from Vace Kundakci and Daphne Tzoar (Columbia U),  Bob
              Shields  (U.  Maryland),  Victor Lee (Queens U.), Gary Bjerke (U.
              Texas  at  Austin),  Greg  Small  (UC  Berkeley),  Clark  Frazier
              (Harvard  Bus. Sch.), Bob Bolch and Steve Blankinship (Triangle),
              Ron Rusnak (U. Chicago), Roger Fajman and Dale White (NIH), Andre
              Pirard (U. Liege)
Language:     IBM 370 Assembler
Documentation:
              John Chandler (CfA)
Version:      4.0
Date:         1988 February

Kermit-370 is a family  of  programs  implementing  the  KERMIT  file  transfer
protocol for IBM 370-series mainframes (System/370, 303x, 43xx, 308x, etc.) un-
der a variety of operating systems.  Kermit-370 operates over asynchronous  AS-
CII communication lines attached to 3705-style front ends ("TTY" devices), to a
Series/1 or 4994 running the Yale ASCII Terminal Communication  System  or  the
IBM  7171  ASCII  Device Control Unit or a 9370 with ASCII subsystem ("SERIES1"
devices), or to SNA-type front-ends with graphics pass-through  mode,  such  as
the MICOM 7400, Datastream/Leedata 8010, and PCI 1076 ("GRAPHICS" devices), or,
in some configurations, to an IBM 3708 ("FULLSCREEN" device).  As of this writ-
ing,  the  pending  implementation  of  full  7171 compatibility in the program
product SIM3278 has not been completed.  For more details  on  front-ends,  see
the section SET CONTROLLER.

The  source is coded in IBM 370 assembly language and is divided into sections,
some generic and some specific to an individual operating system.    While  the
details of file-system and supervisor interaction vary widely among the systems
available for IBM 370's, the basic features are essentially  the  same.    This
chapter  will describe the features common to all variants of Kermit-370, and a
separate chapter will deal with the system-specific details for each variant.

IBM 370 systems have some peculiarities that users should be aware of.   First,
they  are  essentially  half-duplex  systems; the communication line must "turn
around" before any data can be sent to it.   The  "TTY"  devices  are  strictly
half-duplex, and even the "SERIES1" and "GRAPHICS" devices, although they main-
tain full-duplex communication with the terminal, must transmit a  block  at  a
time  to  the mainframe.  The fact that a packet has been received from the IBM
system through a "TTY" device is no guarantee that it is  ready  for  a  reply;
generally,  the  true  indicator  of readiness is the line turnaround character
(XON), which the operating system sends immediately before issuing a  read  re-
quest.  On some systems, however, it is possible for Kermit to do away with the
system-supplied turnaround and schedule read  requests  immediately  after  the
corresponding  writes.    It is up to the user to tell the other Kermit that it
must conform to the requirements of the IBM mainframe.

Second, disk files are encoded using the EBCDIC character set.    Consequently,
there are three layers of character translation on packets exchanged on a "TTY"
device.  For an incoming packet, the outer layer is provided by  the  operating
system,  which translates all characters from ASCII to EBCDIC.  Kermit-370 must
then translate the packets back to ASCII (the middle layer) in  order  to  cal-
culate  and  verify  the  checksum.    Data  arriving  through  a  "SERIES1" or
"GRAPHICS" device are still in ASCII and therefore bypass the two outer layers.
In  any  case,  Kermit-370 translates everything finally into EBCDIC (the inner
layer) before storing on disk (except BINARY files).  When Kermit-370  sends  a
file,  the  opposite translations occur.  In translation, EBCDIC characters not
representable in ASCII are replaced by nulls.  In some  cases,  several  EBCDIC
characters  are  mapped  into  a single ASCII character, but no two 7-bit ASCII
characters are translated into the same EBCDIC  character.    The  middle-layer
tables  used  by  Kermit  must be the inverses of the corresponding outer-layer
ones used by the host operating system if file transfers are to  work  at  all.
If   necessary,   the   system   programmer  should  add  the  appropriate  SET
TATOE/TETOA/TTABLE subcommands (q.v.)  to the global "INIT" file (see the  next
section).    Indeed,  it  is usually a good idea to set TTABLE ON in the global
"INIT" file to force using different built-in sets of tables for the inner  and
middle   layers,   whenever  the  system  has  "TTY"  devices.    The  standard
ASCII-to-EBCDIC translations can be found in the Appendix or the IBM System/370
Reference Card.

Another  distinction  of  IBM  370's  is  that they store and retrieve files as
records rather than byte streams.  Records may be either fixed-length with some
sort  of  padding  (as  needed)  or varying-length with some sort of (generally
hidden) delimiters.  Thus, Kermit-370 must assemble incoming data packets  into
records  by  stripping  off carriage return-linefeed pairs (CRLF's) and padding
with blanks or truncating as needed and must strip trailing blanks  and  append
CRLF's  to  outgoing  records.   Further, disk files typically have the records
combined into blocks for efficiency.  One consequence of this form  of  storage
is  that files have attributes describing the component records: maximum record
length (LRECL), record format (RECFM), and sometimes block size (BLKSIZE).

As mentioned before, Kermit-370 is a family of programs.  At present, only  the
CMS  and  TSO  versions  are operational.  Versions for DOS/VSE and MTS have at
least reached the "drawing board,"  but  no  others  have  even  been  started.
Volunteers  are always welcome to port Kermit-370 to other operating systems or
add new features to the existing family.  Anyone interested should first get in
touch  with  the Center for Computing Activities at Columbia University to find
out what projects of a similar nature are already pending (and thereby  prevent
unnecessary duplication of effort).


1.1. Program Operation

Kermit-370  can  be  invoked  directly  or from a command procedure.  In either
case, it reads and executes subcommands sequentially until directed to quit and
then returns.  A subcommand consists of one or more fields (words) separated by
spaces.

Upon initial startup, the  program  looks  for  two  (optional)  initialization
files,  one system-wide and a second specific to the user.  Both filespecs are,
of course, system-dependent.  The purpose of these files is to allow Kermit  to
be  customized for a particular system and for a user's specific settings with-
out changing the source code.  The system-wide file, which is maintained  by  a
systems programmer, should contain Kermit subcommands that all users would need
to issue in order for Kermit to run on  the  system,  such  as  subcommands  to
modify  the ASCII/EBCDIC tables used by Kermit-370.  The user-specific file, if
any, should contain subcommands that the user generally issues every time  Ker-
mit is run.  Kermit-370 executes any subcommands found in these files as though
they were typed at the terminal.  Here is a sample "INIT" file:

    * Asterisk in column one is a comment.
    set debug on
    set warning on
    set block 3

During interactive execution, you may  use  the  built-in  help  feature  while
typing Kermit-370 subcommands.  A question mark ("?") typed at almost any point
in a subcommand, followed by a carriage return, produces a brief description of
what  is  expected or possible at that point.  Moreover, mistyping a subcommand
will generally produce a helpful error message or a list of possible options at
the   point  of  error.    Keywords  in  such  lists  are  displayed  with  the
minimum-length abbreviation in upper case and the remainder, if any,  in  lower
case.  In entering Kermit subcommands, any keyword may be shortened to any sub-
string that contains the minimum abbreviation.


1.2. Kermit-370 Subcommands

The following is a brief summary of Kermit subcommands.   The  starred  subcom-
mands can be issued as remote Kermit commands to Kermit-370 when it is in serv-
er mode.  System-specific subcommands are omitted from this list.

          BYE      logs out other Kermit server.
          CWD*     establishes a new working directory.
    DIRECTORY*     displays all or part of the disk directory.
         ECHO      a line back to the user.
         EXIT      from Kermit-370.
       FINISH      other Kermit server.
          GET      file(s) from a Kermit server.
         HELP      about Kermit-370.
         HOST*     executes a system command.
       KERMIT*     executes a Kermit subcommand.
         QUIT      from Kermit-370.
      RECEIVE      file(s) from other Kermit.
         SEND      file(s) to other Kermit.
       SERVER      mode of remote operation.
          SET*     various parameters.
         SHOW*     various parameters.
        SPACE*     displays disk storage allocation.
       STATUS*     inquiry.
         TAKE*     subcommands from file.
        TDUMP*     dumps the contents of a table.
         TYPE*     a file.
        XECHO      echoes a line (transparently).
        XTYPE      displays a file (transparently).

Although Kermit-370 is generally a remote Kermit, it has the capability of com-
municating  with another Kermit in server mode.  In that situation, the subcom-
mand prefixes REMOTE and LOCAL refer  to  the  Kermit  server  and  Kermit-370,
respectively,  even  when  Kermit-370 is, strictly speaking, the remote Kermit.
Any replies from the Kermit server are added to a disk file (whose filespec is,
of  course,  system-dependent).  Such a transaction can be carried out, for ex-
ample, under control of a TAKE file if Kermit-370 is not operating locally.  If
the  local  Kermit  has a "magic" character sequence that switches it from ter-
minal emulation to server mode, then an entire session could be controlled from
the mainframe, possibly in response to a single command issued by a naive user.
For example,

    grab

         Kermit-370 is invoked and executes the following TAKE file

    ECHO Serve Me!        the local Kermit switches to server mode
    GET file.a            the server uploads file.a
    FINISH                the server switches back to terminal mode

The remainder of this section concentrates on the subcommands that have special
form or meaning for Kermit-370, but neglects those with highly system-dependent
syntax or use.


                              THE SEND SUBCOMMAND

Syntax: SEND ¢filespec ¢foreign-filespec||

The SEND subcommand tells Kermit-370 to send a file or file group to the  other
Kermit.    If  no such file exists, Kermit-370 simply displays an error message
and issues another prompt.  If one or more files  are  sent,  their  names  are
recorded  in  memory and may be viewed later via the TDUMP subcommand (but with
no indication of whether any of them were rejected or cancelled  by  the  other
Kermit).    If this subcommand is issued without any arguments, Kermit-370 will
prompt the user for both native and foreign filespecs (and will insist on  get-
ting the former, but will do without the latter).

When Kermit-370 sends files using long packets (longer than 96), the throughput
is especially sensitive to the level of noise on the line because  retries  are
so  time-consuming.   Therefore, Kermit-370 adds an extra, heuristic size limit
for packets when retries have been found necessary.  When  that  is  the  case,
after  every 20 packets, Kermit computes the packet size for maximum throughput
assuming that the transmission errors were due to  sparse,  Poisson-distributed
noise  bursts.  The result of this calculation is then used as another limit on
the size of outgoing packets besides the one specified by the other Kermit.  If
no  retries  are required, then Kermit-370 assumes the line to be noiseless and
sends packets of the maximum length the other Kermit allows.  For more  details
on  the  SEND  subcommand  syntax and operation, see the chapter on the desired
system-specific version of Kermit-370.


                            THE RECEIVE SUBCOMMAND

Syntax: RECEIVE ¢filespec|

The RECEIVE subcommand tells Kermit-370 to accept a file or file  group.    The
user  must  issue the corresponding SEND subcommand to the other Kermit.  Under
some circumstances, the records of the received file(s) may be truncated;  when
this  happens,  Kermit  does  not  stop, but notes the fact as an error (unless
something more serious happens later).  For more details on the RECEIVE subcom-
mand  syntax and operation, see the chapter on the desired system-specific ver-
sion of Kermit-370.


                              THE GET SUBCOMMAND

Syntax: GET ¢foreign-filespec ¢filespec||

The GET subcommand tells Kermit to request a file or file group from the  other
system,  which  must  have a Kermit running in server mode.  Provided the other
Kermit complies, the effect is the same as if SEND  foreign-filespec  had  been
issued  directly  to  the  other  Kermit  and RECEIVE ¢filespec| to Kermit-370.
other Kermit).  If this subcommand is issued without any arguments,  Kermit-370
will  prompt the user for both foreign and native filespecs (and will insist on
getting the former, but will do without the latter).  See the  respective  SEND
and RECEIVE subcommands for a description of the each filespec.


                              THE TAKE SUBCOMMAND

Syntax: TAKE filespec

Execute Kermit subcommands from the specified file, usually called a TAKE file.
The TAKE file may in turn include TAKE subcommands to a nesting depth  of  ten.
If  a  TAKE  file  includes  the  subcommand SERVER, however, the nesting count
starts over again in server mode.  The user has the option of seeing  the  sub-
commands  echoed from the TAKE file as they are executed and also the option of
automatically exiting from a TAKE file on error.  See the subcommand  SET  TAKE
for details.


                             THE SERVER SUBCOMMAND

Kermit-370  is  capable  of acting as a server.  In server mode, Kermit-370 can
send and receive files, execute host commands, execute a restricted set of Ker-
mit  subcommands,  and perform a variety of generic Kermit functions.  The fol-
lowing list shows the typical local Kermit commands along with the server func-
tions  they  elicit.    When Kermit-370 is talking to another Kermit running in
server mode, these same subcommands may be used in the other direction.

BYE                 log out the Kermit server.
FINISH              server mode.
GET                 a file or files from the server.
REMOTE
  COPY              a file or files.
  CWD               set new working directory.
  DIRECTORY         display file attributes.
  ERASE             a file or files.
  HELP              display this command summary.
  HOST              execute a system command.
  KERMIT            execute a Kermit-370 subcommand.
  RENAME            a file or files.
  SPACE             display disk space.
  TYPE              a file.
SEND                a file or files to the server.

If your local Kermit does not support the REMOTE KERMIT command, you  may  need
to  issue  SET  subcommands  to select various options before typing the SERVER
subcommand.  Once in server mode, Kermit-370 will await  all  further  instruc-
tions from the user Kermit on the other end of the connection until a FINISH or
BYE command is given.

Command execution in server mode is different  in  some  respects  from  normal
operation.  First of all, some Kermit subcommands are not allowed (see the list
at the beginning of this section).  Moreover, command errors  always  terminate
any  active  TAKE file.  Also, all commands will be run in the special environ-
ment that Kermit sets up during protocol transfers.  Among other things, Kermit
intercepts  all  terminal  I/O  (if  possible)  in this environment in order to
transmit the data to the local Kermit as text packets.

Note that some operations can be requested by several different commands.    If
for  example,  the  IBM 370 system has a command "PRT" for displaying a file, a
user interacting with a Kermit-370 server can choose to display a file  by  is-
suing  any  of  the commands: REMOTE TYPE, REMOTE HOST PRT, REMOTE KERMIT TYPE,
REMOTE KERMIT HOST PRT, or (if SYSCMD has been set ON) REMOTE KERMIT PRT.   The
first  form  simply transfers the requested file as text, but the others invoke
the "PRT" command with any specified options, intercept  the  terminal  output,
and return the results to the local Kermit.


                              THE SET SUBCOMMAND

Syntax: SET parameter ¢value|

The  SET subcommand establishes or modifies various parameters controlling file
transfers.  The values can, in turn, be  examined  with  the  SHOW  subcommand.
Some  parameters  have two levels.  In particular, there are two matching lists
of SEND and RECEIVE sub-parameters corresponding to  the  values  exchanged  by
Kermits  in  the  Send-Init/ACK sequence.  For each of these SEND/RECEIVE pairs
one element is encoded in outgoing parameter packets, and the other is  decoded
from incoming ones.  Setting the latter by hand may be needed to establish con-
tact and also has the effect of redefining the default value for decoding  from
subsequent  parameter  packets.    Generally,  the distinction between SEND and
RECEIVE parameters is unambiguous, the only  exception  being  TIMEOUT  (q.v.).
The following SET subcommands are available in Kermit-370:

APPEND              Append if file name collision.
ATOE                Modify the Kermit-370 ASCII-to-EBCDIC table.
BLOCK-CHECK         Level of error checking for file transfer.
CONTROLLER          Indicate type of terminal connection.
DEBUG               Log packet traffic during file transfer.
DELAY               Length of pause before a SEND subcommand.
EOF                 Text file truncation at CTRL-Z.
ETOA                Modify the Kermit-370 EBCDIC-to-ASCII table.
FILE                Attributes for incoming or outgoing files...
  TYPE              ... text or binary.
  other             ... system-specific attributes.
FOREIGN             Strings added to outgoing filespec...
  PREFIX
  SUFFIX
INCOMPLETE          Determine the action on an aborted file transfer.
LINE                Specify alternate communication line.
MARGIN              for sending files...
  LEFT
  RIGHT
PARITY              Indicate if 7-bit or 8-bit data.
RETRY               Maximum retry count...
  INIT              ... for initial packet exchange.
  PACKET            ... per packet for ongoing transfer.
SYSCMD              Try apparently invalid Kermit subcommands on host system.
TABS-EXPAND         Determine tab-to-space conversion on reception.
TAKE
  ECHO              Echo subcommands read from TAKE files.
  ERROR-ACTION      Exit from TAKE file on command error.
TEST                Facilitate testing of Kermit.
TATOE               Modify the Kermit-370 ASCII-to-EBCDIC table.
TETOA               Modify the Kermit-370 EBCDIC-to-ASCII table.
TTABLE              Determine which tables undo the terminal translation.
WARNING             Rename if filename collision.
8-BIT-QUOTE         Determine state of 8th-bit prefixing.
SEND or RECEIVE
  END-OF-LINE       Packet terminator.
  PACKET-SIZE       Maximum packet size.
  PAD-CHAR          Character to insert before each packet.
  PADDING           Number of pad characters to insert.
  QUOTE             Use to quote control characters in packets.
  START-OF-PACKET   Packet beginning marker.
  TIMEOUT           Time limit for response.


SET APPEND

Syntax: SET APPEND ON or OFF

ON      If  an incoming file has the same name as an existing one, the new file
        is appended to the old one.  This option supersedes SET WARNING.

OFF     Filename collision is  handled  according  to  the  WARNING  parameter.
        (Default.)


SET ATOE etc.

Syntax: SET table ¢num1 num2|

This  modifies  one  of  the ASCII/EBCDIC translation tables used by Kermit-370
(for example, to conform to your system).  The  valid  table  names  are  ATOE,
ETOA, TATOE, and TETOA.  The arguments are, respectively, the offset within the
named table and the new value for that offset.  If the arguments  are  omitted,
the table is restored to its initial arrangement.  Both num1 and num2 should be
in the range 0-255 (decimal).  For example, in ATOE or TATOE, the offset is the
ASCII  character  code,  and  the new value is the new EBCDIC result code.  In-
itially, ATOE and TATOE each contain two identical copies of  the  7-bit  ASCII
character table.  Note: the meaning of the tables depends on the TTABLE setting
-- if TTABLE is OFF, the TATOE and TETOA tables are not used.


SET BLOCK-CHECK

Syntax: SET BLOCK-CHECK number

This determines the type of block check used during file transfer, provided the
other  Kermit  agrees.    Valid  options for number are: 1 (for a one-character
checksum), 2 (for a two-character checksum) and 3 (for a three-character  CRC).
This  is one of only two Send-Init parameters that cannot be SET separately for
SEND and RECEIVE.


SET CONTROLLER

Syntax: SET CONTROLLER type

The type may be TTY, SERIES1, GRAPHICS, or FULLSCREEN.    Kermit-370  automati-
cally  determines  whether you are connected via a Series/1 (or similar) emula-
tion controller or a TTY line.  This subcommand is provided, though,  to  allow
that choice to be superseded, and because Kermit may not be able to distinguish
between Series/1-type and other 3270-emulation controllers.  When CONTROLLER is
set  to SERIES1 or GRAPHICS, Kermit disables the 3270 protocol conversion func-
tion by putting the terminal controller into "transparent mode",  which  allows
Kermit packets to pass through intact.


SET DEBUG

Syntax: SET DEBUG ON or RAW or OFF

ON      Keep  a journal of all packets sent and received in a log file on disk.
        If the file already exists, it is erased and overwritten.  The filespec
        of  the log is, of course, system-dependent.  All packets are logged in
        EBCDIC for legibility, even  when  CONTROLLER  is  set  to  SERIES1  or
        GRAPHICS.    In  addition to the packets themselves, which are labelled
        "S" or "R" for packets sent or  received,  the  log  includes  any  ad-
        ditional status information (labelled "A"), such as the AID returned by
        a SERIES1 device.

RAW     The same as ON, but packets are logged in the form that is passed to or
        from  the  operating  system, i.e., EBCDIC for TTY terminals, and ASCII
        for SERIES1 and GRAPHICS terminals.

OFF     Stop logging packets and close the the log file.  (Default.)


SET DELAY

Syntax: SET DELAY number

Normally, Kermit-370 waits 10 seconds after the SEND subcommand before starting
the  transfer,  but this delay may be SET to any non-negative value.  Two DELAY
values have special meaning.  When DELAY is 1, the usual two-line greeting dis-
played during protocol mode is abbreviated to a short message (the default Ker-
mit prompt with three dots...), and when DELAY is 0, the greeting is suppressed
entirely, along with the extra one-second pause for the RECEIVE and SERVER sub-
commands.


SET EOF

Syntax: SET EOF ON or OFF

ON      Scan each incoming TEXT file for the first occurrence of CTRL-Z and ig-
        nore  the remainder of the file (but continue decoding up to the actual
        end of the file).  BINARY files are not affected.

OFF     Accept incoming files in their entirety.  (Default.)


SET FILE TYPE

Syntax: SET FILE TYPE TEXT or BINARY or V-BINARY or D-BINARY

TEXT       Specifies ordinary text.  ASCII-to-EBCDIC or EBCDIC-to-ASCII  trans-
           lation  is  performed on the data.  Trailing blanks are removed, and
           CRLF's are appended to outgoing records. CRLF's are used,  in  turn,
           to  determine  the  end  of  incoming records, which are padded with
           blanks if necessary to fill buffers.  (Default.)

BINARY     Specifies bit-stream data.  No translation is performed,  no  CRLF's
           are  added  to  outgoing  records,  and blanks are neither added nor
           removed.  Incoming bytes  are  added  successively  to  the  current
           record  buffer,  which  is  written  out  when  the current LRECL is
           reached.  Padding, if necessary, is done with nulls.

V-BINARY   Specifies varying-length-record binary data.  This type is like  BI-
           NARY, except that a two-byte binary prefix is added to each outgoing
           record giving the number of data bytes, and incoming records are set
           off by (and stripped of) their prefixes on receipt.

D-BINARY   Is  like  V-BINARY  except  that  the  length prefixes are five-byte
           ASCII-encoded decimal (right-justified with leading zeroes).


SET FOREIGN

Syntax: SET FOREIGN PREFIX string

This defines a prefix string to be added to the outgoing filespec generated  by
the  SEND  subcommand.  For example, the string might be set to "B:" to specify
output to the B disk drive on the other Kermit's system.  The default is a null
string.  There is also a FOREIGN SUFFIX handled in the same manner.


SET HANDSHAKE

Syntax: SET HANDSHAKE number

This defines the character, if any, that Kermit-370 should send (or cause to be
sent) immediately before reading each packet.  The character is  given  as  the
decimal  of  an  ASCII  control  character, or as zero if no handshake is to be
sent.  The default is 17 (XON), and any value in the range 0-31 is  valid,  but
13 (CR) should not be used because it is generally the end-of-packet character.
When Kermit-370  is  running  through  a  full-duplex  connection  (such  as  a
"SERIES1"),  the  traditional  IBM  handshaking is not necessary, and HANDSHAKE
should be set to 0 (as long as the other Kermit can be instructed not to expect
a  handshake).  Note the distinction between SET HANDSHAKE in Kermit-370 (where
it defines a character to be sent) and in many micro Kermits (where it  defines
a character to be expected).


SET INCOMPLETE

Syntax: SET INCOMPLETE DISCARD or KEEP

DISCARD   Specifies that incomplete files (that is, files partially received in
          a transfer cancelled by the other Kermit) are to be erased.  This  is
          the default.  Note that when APPEND is ON, incomplete files are never
          erased, lest pre-existing data be lost.

KEEP      Specifies that incomplete files are to be kept.


SET LINE

Syntax: SET LINE ¢name|

This specifies an alternate communication line for file transfers.  If the name
is omitted, the default line (the user's terminal) is used.  The format of name
is, of course, system-dependent, and some versions of Kermit-370 do not support
any alternate lines.  No version currently allows Kermit-370 to CONNECT over an
alternate line.


SET MARGIN

Syntax: SET MARGIN side column

When Kermit-370 sends a text file, each line may be truncated on  the  left  or
right (or both) at fixed column numbers.  Only the text from the left margin to
the right margin (inclusive) will be sent, and any trailing blanks in the trun-
cated lines will be stripped.  A value of zero for either margin disables trun-
cation on that side.


SET PARITY

Syntax: SET PARITY MARK or NONE

Transparent-mode ASCII data received from a "SERIES1" or "GRAPHICS" device will
typically have either all Mark parity (seven data bits with the eighth bit set)
or no parity (eight data bits).  Kermit-370 must know which kind of  parity  to
expect in order to calculate checksums properly.  Since Kermit-370 does not ac-
tually verify parity, the other possible variants (ODD, EVEN,  and  SPACE)  are
lumped  together  with  MARK  parity  for the purpose of this subcommand, which
merely chooses between 7-bit and 8-bit data transfer.  The default is MARK.


SET PROMPT

Syntax: SET PROMPT string

This defines the character string that Kermit-370 displays when  asking  for  a
subcommand.   The prompt may be any string of up to 20 characters.  The default
is the name of the system-specific version of  Kermit-370  followed  by  a  ">"
sign, e.g., Kermit-CMS>.


SET RETRY

Syntax: SET RETRY INITIAL or PACKETS number

Kermit-370  resends its last packet after receiving a NAK or bad packet, but it
eventually gives up after repeated failures or the same packet.  The  limit  on
retries  can  be  set  separately for the initial packet exchange (Send-Init or
server-mode command) and for ordinary packets.  The default for INITIAL  is  16
and for PACKETS, 5.  Either limit can be set to any positive value.


SET SYSCMD

Syntax: SET SYSCMD ON or OFF

ON      If the user enters a command string which is not a valid Kermit subcom-
        mand, Kermit-370 will pass the string along to the host operating  sys-
        tem  for  execution.   If the string is rejected by the system as well,
        Kermit will report it as an invalid Kermit subcommand.  Otherwise, Ker-
        mit  will  assume  the  string  was intended as a host command and will
        simply report the completion code if non-zero.

OFF     Invalid Kermit subcommands are simply rejected as such.    System  com-
        mands  may  be  executed, of course, but only by specifying the generic
        prefix "HOST" or the appropriate system-specific prefix, such as CMS or
        TSO.  (Default.)


SET TABS-EXPAND

Syntax: SET TABS-EXPAND ON ¢list| or OFF

ON      Tab  characters  in  incoming  TEXT  files  are replaced by one or more
        blanks to bring the record size up to the next higher multiple of eight
        for  each  tab.   If tab settings other than columns 1, 9, 17, etc. are
        desired, they may be specified  explicitly  in  a  list  following  the
        keyword "ON".  Items in the list may be separated by spaces or commas.

OFF     Incoming tabs are retained.  (Default.)


SET TAKE ECHO

Syntax: SET TAKE ECHO ON or OFF

ON      Subcommands are echoed to the terminal as they are executed from a TAKE
        file.

OFF     Subcommands from a TAKE file are executed "silently."  (Default.)


SET TAKE ERROR-ACTION

Syntax: SET TAKE ERROR-ACTION CONTINUE or HALT

CONTINUE   Execution continues in a TAKE file regardless of  illegal  commands,
           except in server mode.  This is the default.

HALT       A  command error in a TAKE file causes immediate exit to Kermit sub-
           command level.


SET TEST

Syntax: SET TEST ON or OFF

ON      Allow setting the START-OF-PACKET and other special characters  to  any
        value, and suppress checksum testing on received packets.

OFF     Normal operation.  (Default.)


SET TTABLE

Syntax: SET TTABLE ON or OFF

ON      The translation that undoes the terminal controller's ASCII/EBCDIC con-
        version comes from the TATOE and TETOA tables, rather than the ATOE and
        ETOA tables (which are used only for translating disk files).  This op-
        tion has no effect when there is no translation  built  into  the  con-
        troller, i.e., with SERIES1 and GRAPHICS connections.

OFF     The  ATOE  and ETOA tables are used for all translations by Kermit-370.
        (Default.)


SET WARNING

Syntax: SET WARNING ON or OFF

ON      If an incoming file has the same filespec as an existing file on  disk,
        Kermit  will  attempt  to rename the incoming file so as not to destroy
        (overwrite) the pre-existing one.

OFF     Upon filename collision, the existing file will be erased and  replaced
        by the incoming file.  (Default.)


SET 8-BIT-QUOTE

Syntax: SET 8-BIT-QUOTE char or ON or OFF

This  controls  whether eighth-bit prefixing is done and can be used to specify
the character to be used.  This is one of only two  Send-Init  parameters  that
cannot be SET separately for SEND and RECEIVE.

char    Eighth-bit prefixing will be done using char, provided the other Kermit
        agrees.

ON      Eighth-bit prefixing will be done, provided the other Kermit explicitly
        requests it (and specifies the character).

OFF     Eighth-bit prefixing will not be done.  (Default.)


SET SEND/RECEIVE

The  following  parameters  can be set either as SEND or RECEIVE options.  As a
rule, in each pair, one is the operational value, and  the  other  is  used  to
change  the default for Send-Init packets received from the other Kermit and to
set up parameter values as if the other Kermit had specified them on  the  pre-
vious  exchange.    When both values are described, the operational one will be
first.  After a transfer, the operational values will  be  unchanged,  but  the
others  (as  displayed  by  SHOW)  will reflect the parameters specified by the
other Kermit.  The underlying defaults established by previous SET  subcommands
will still be in effect.  In the syntax descriptions, mode is SEND or RECEIVE.


END-OF-LINE

Syntax: SET mode END-OF-LINE number

RECEIVE should not be changed.

SEND  may be needed to establish contact.  If the other system needs packets to
be terminated by anything other than carriage return, specify the decimal value
of  the  desired  ASCII character.  number must be in the range 0-31 (decimal).
The default is 13 (CR).


PACKET-SIZE

Syntax: SET mode PACKET-SIZE number

RECEIVE defines number as the maximum length for incoming packets.   The  valid
range  is  26-9024,  but 94 is the limit for normal short-packet protocol.  The
default is 80.  In practice, the size may be limited by hardware  and  program-
ming considerations.  See the system-specific chapters for details.

SEND  might  be  needed  for  sending  files  to  a minimal Kermit that neither
specifies a buffer size in the Send-Init sequence nor can  accept  the  default
(80).  This parameter has no other function and is meaningful only in the range
26-94.


PAD-CHAR

Syntax: SET mode PAD-CHAR number

RECEIVE defines number as the character to be used by the other Kermit for pad-
ding  packets.   The character must be an ASCII control character (in the range
0-31).  The default is 0 (NULL).  This option is seldom useful.

SEND may be needed to establish contact if the other Kermit (or  the  transmis-
sion line) needs padded packets.


PADDING

Syntax: SET mode PADDING number

RECEIVE  defines  the  number  of pad characters to be used for padding packets
from the other Kermit.  This number may be anywhere from 0 to 94.  The  default
is 0.  This option is seldom useful.

SEND  may  be needed to establish contact if the other Kermit (or the transmis-
sion line) needs padded packets.


QUOTE

Syntax: SET mode QUOTE char

SEND indicates a printable character for prefixing (quoting) control characters
and  other prefix characters.  The only good reason to change this would be for
sending a file that contains many "#" characters (the normal control prefix) as
data.    It  must  be  a  single  character  with  ASCII  value 33-62 or 96-126
(decimal).

RECEIVE would be needed only for talking to  a  crippled  Kermit  that  uses  a
non-standard quoting character, but does not admit it.


START-OF-PACKET

Syntax: SET mode START-OF-PACKET number

RECEIVE  defines  number  as  the character to be expected to mark the start of
packets from the other Kermit.  The character must be an ASCII control  charac-
ter (in the range 0-31).  The default is 1 (SOH).  This may be needed to estab-
lish contact.

SEND may also be needed to establish contact.  It defines number as the charac-
ter to be used to mark outgoing packets.


TIMEOUT

Syntax: SET mode TIMEOUT time

RECEIVE  defines the time in seconds the other Kermit is to wait for a response
from Kermit-370 before resending a packet.  The default is 5.   A  value  of  0
means the other Kermit should wait indefinitely.

SEND  defines the time in seconds Kermit-370 is to wait for a response from the
other Kermit before resending a packet.  The default is 0.


                              THE SHOW SUBCOMMAND

Syntax: SHOW ¢option|

The SHOW subcommand displays the values of all parameters that can  be  changed
with  the  SET  subcommand, except for ATOE, ETOA, TATOE, and TETOA (for those,
see the TDUMP subcommand).  If specified, option can be a particular  parameter
or the keyword "ALL" (the default).  Groups of parameters, such as SEND, can be
displayed by requesting the group name, or  individual  sub-parameters  can  be
displayed by specifying the complete name.  For example,

    SHOW RECEIVE EOL

will  display  the  decimal value of the packet terminator that Kermit-370 cur-
rently expects, i.e., 13.  Similarly,

    SHOW FOREIGN

will display the character strings currently in use for prefix  and  suffix  on
each outgoing filespec.


                             THE STATUS SUBCOMMAND

Syntax: STATUS

This  subcommand displays information about the previously executed subcommand.
The response will include either the appropriate error message or  the  message
"No  errors".    The  initial status is "No file transfers yet".  If the status
reflects an error condition, the name of the last  file  used  (excluding  TAKE
files)  will be displayed as well.  If the error was detected by the other Ker-
mit, the message will be "Micro aborted" followed by the text  from  the  Error
packet.    Conversely, if Kermit-370 detected the error, the text of the status
message will have constituted the error packet sent out.  In any case,  if  the
last  file transfer was cancelled (by virtue of an attribute mismatch or manual
intervention), the reason for cancellation is displayed.  Also,  if  the  error
occurred in disk I/O, any available explanatory information is displayed.  Nor-
mally, the error status is altered only when a  transfer-initiating  subcommand
(SEND  or RECEIVE) is executed, but in server mode every subcommand is received
through a transfer from the other Kermit and may affect the status (except  the
STATUS subcommand itself, of course).  When Kermit-370 has been forced to trun-
cate one or more records in a RECEIVE operation (because of the current maximum
record  length),  the number of records truncated is reported.  The status dis-
play also includes throughput statistics for the last transfer: number of files
sent,  duration,  number  of  packets,  number  of  retries,  and  averages  of
bytes/packet and bytes/second.    These  last  two  quantities  are  calculated
separately for bytes sent and received on the communication (including padding,
if any), and the last quantity is also calculated on the basis of the number of
bytes read from or written to disk.

Finally, if retries were necessary, Kermit-370 computes the optimum packet size
assuming the retries to have been due to sparse, Poisson-distributed bursts  of
noise.  This is the same heuristic optimum that Kermit-370 computes and uses as
an alternative packet-size limit when sending long packets.


                             THE TDUMP SUBCOMMAND

Syntax: TDUMP table-name or NAMES

This displays the contents of table-name.  The same table can be modified using
the  SET  subcommand.  The ATOE, ETOA, TATOE, and TETOA tables can presently be
displayed and changed.  Alternatively, the filespec of each file  sent  in  the
last transfer can be displayed.


                              THE GIVE SUBCOMMAND

Syntax: GIVE table-name filespec

This compares the named table with its default values and saves the differences
in the form of a TAKE file consisting of SET subcommands that would convert the
default  into  the  current  arrangement.  ATOE, ETOA, TATOE, and TETOA are the
available tables.  The details of the filespec are system-dependent, but  those
details will, in general, be the same as for the TAKE subcommand.


                              THE HOST SUBCOMMAND

Syntax: HOST text of command

This  issues  a  command  to the host operating system from Kermit-370.  When a
command returns a  non-zero  completion  code,  the  code  will  be  displayed.
Generally,  the  name of the system (e.g., CMS) is treated as a synonym for the
HOST subcommand.


                             THE KERMIT SUBCOMMAND

Syntax: KERMIT text of subcommand

This is provided for redundancy as the  counterpart  of  the  HOST  subcommand.
Kermit-370  executes  the  specified text as a Kermit subcommand just as if the
LOCAL prefix had been entered.


                        THE ECHO AND XECHO SUBCOMMANDS

Syntax: ¢X|ECHO line

These subcommands type the line back at the user.  The line may contain control
characters  or  any desired text, including upper or lower case.  These subcom-
mands may be used, for example, to test the ASCII/EBCDIC translate tables or to
issue coded commands to the user's terminal.  XECHO differs from ECHO primarily
in that it uses transparent mode if CONTROLLER is SERIES1 or GRAPHICS.  It also
offers  its  own brand of control-character quoting, using the "¬" character to
indicate that only the five low-order bits of the ASCII codes are to  be  used.
Thus,  "¬a",  "¬A", and "¬!" are all translated to SOH (CTRL-A), while "¬¢" be-
comes ESC.  However, there must be one exception for "¬" itself: "¬>" and  "¬~"
are both translated to RS (CTRL-¬), but "¬¬" becomes just "¬".


                        THE TYPE AND XTYPE SUBCOMMANDS

Syntax: ¢X|TYPE filespec

These  subcommands  type  the named file.  XTYPE differs from TYPE primarily in
that it uses transparent mode if CONTROLLER is SERIES1 or GRAPHICS,  and  sends
the data in bursts no larger than the current SEND PACKET-SIZE.  TYPE is effec-
tively a synonym for (and allows the same options as) the host  system  command
for listing files, but XTYPE merely sends the file "raw".


1.3. Before Connecting to the Mainframe

Several  flags  must be set on the micro version of Kermit before connecting to
an IBM 370 system as a "TTY" device.  You should set the LOCAL-ECHO flag to  ON
(to  indicate  half-duplex).  This is the norm but not true in absolutely every
case; if each  character  appears  twice  on  your  terminal  screen,  set  the
LOCAL-ECHO  flag  OFF.  FLOW-CONTROL should be set to NONE, and on some systems
HANDSHAKE should be set to XON.  The parity should  be  set  according  to  the
system's specifications.  On some micro versions of Kermit, all of the above is
done in one step using the DO IBM macro (or SET IBM ON).  Set the baud rate  to
correspond to the line speed.

Connecting  through a "SERIES1" or "GRAPHICS" device also requires that certain
flags be set on the micro version of Kermit.  You  should  set  the  LOCAL-ECHO
flag to OFF (to indicate full-duplex).  FLOW-CONTROL should be set to XON/XOFF,
and HANDSHAKE should be set to OFF.  For many systems, the PARITY should be set
to EVEN.  Set the baud rate to correspond to the line speed.

One  exception  to these rules is the case where the micro Kermit is attempting
automated  file  transfer,  e.g.,  downloading  several  separate  files   from
Kermit-370  running  in server mode.  In fact, under those circumstances, hand-
shaking is necessary even with "SERIES1" connections, and the two Kermits  must
be  instructed to adopt a common handshake character (e.g., by SET HANDSHAKE 10
to Kermit-370 and SET HANDSHAKE LF to the micro).

In any case, you should make sure that either the micro  Kermit  or  Kermit-370
will  provide  timeouts  during file transfers (if not both).  Some versions of
Kermit-370 (notably CMS) cannot provide timeouts, and you may need to  set  the
TIMER to ON in the micro.


1.4. After Returning from Kermit-370

When  Kermit-370  receives a QUIT or EXIT subcommand or finishes the subcommand
or subcommands specified in the original command string  that  invoked  Kermit,
control is returned to the caller.  Before returning, Kermit-370 closes any ac-
tive TAKE files (the EXIT or QUIT subcommand may be issued from a  TAKE  file).
On  return,  the completion code is set from the current error status according
to the codes in Table 1-0.

-------------------------------------------------------------------------------

Code  Symbol  Error Message
 0    NOE     No errors
 1    NFT     No file transfers yet
 2    TRC     Transfer cancelled
 3    USC     Invalid server command
 4    TIE     Terminal I/O error
 5    BPC     Bad packet count or chksum
 6    IPS     Invalid packet syntax
 7    IPT     Invalid packet type
 8    MIS     Lost a packet
 9    NAK     Micro sent a NAK
10    ABO     Micro aborted
11    FNE     Invalid file name
12    FNF     File not found
13    FUL     Disk or file is full
14    DIE     Disk I/O error
15    MOP     Missing operand
16    SYS     Illegal system command
17    KCE     Kermit command error
18    TIM     No packet received
19    RTR     Records truncated
20    COM     Bad communication line

             Table 1-1:   Error messages and codes for Kermit-370

-------------------------------------------------------------------------------


1.5. What's New

Below is a list of the additions in Version 4.0 of Kermit-370:

   1. Code reorganization into generic 370 and system-specific sections.

   2. Optional separate translation tables for  counteracting  the  system
      conversion of terminal I/O.

   3. New GIVE subcommand for saving a modified translation table.

   4. A  new,  RAW debug mode for recording the packet traffic as actually
      sent and received on "GRAPHICS" and "SERIES1" devices.

   5. Preservation of the case of subcommands  as  typed,  with  uppercase
      conversion of only those words that must be uppercase.

   6. New  SET  MARGIN  subcommand  for limiting the width of a file to be
      sent.

   7. Settable tab  stops  for  Kermit's  conversion  of  tabs  to  spaces
      (alternative to the default 1, 9, 17, etc.).

   8. Replace SET SERIES1 subcommand with new SET CONTROLLER.  Support for
      multiple terminal controller types.

   9. New DIRECTORY and HOST subcommands following Kermit standard.

  10. Combination of file-attribute SET subcommands (FILE-TYPE, LRECL, and
      RECFM) into a new group SET FILE.

  11. Separate retry limits for initial and subsequent packet exchanges.

  12. Pad binary records on disk with nulls, rather than blanks.

  13. Automatically tune packet length when sending long packets according
      to heuristic optimum based on sparse  Poisson  statistics,  provided
      that transmission errors do occur.

  14. Expand  STATUS  report  to  include  the number of files in the last
      transfer, throughput statistics,  heuristic  optimum  packet  length
      (when  long packets are enabled), and the reason for any file rejec-
      tion based on A-packets.

  15. New subcommand TDUMP NAMES to display the list of files sent in  the
      last transfer.

  16. Add file creation date to A-packet repertoire.

  17. REMOTE COPY and REMOTE RENAME commands to a server at the other end.

  18. Allow long packets through a 7171 with VTAM.

  19. New  type D-BINARY for binary files with undelimited variable-length
      records.

  20. SET 8-BIT-QUOTE.  Allow 8-bit data where possible via SET PARITY.

  21. SET SYSCMD, so that Kermit can be told to try "illegal"  subcommands
      as host system commands instead of just rejecting them.

  22. SET PROMPT subcommand.

  23. Do not forget parameters specified by the other Kermit in I-packets.

  24. Keep  track  of  truncated  records  during  a RECEIVE operation and
      report the count in STATUS; also  call  truncation  an  error  after
      everything is received.

  25. SET  HANDSHAKE  subcommand  to alter or suppress handshake character
      Kermit-370 sends out after each packet.

Both SEND and GET prompt the user for native and foreign filespecs  if  no  ar-
guments are entered.


1.6. What's Missing

Work  on  Kermit-370 will continue.  Features that need to be improved or added
include:

   - Detect file properties from Attribute packets  and  allow  overriding
     current parameter settings.  Also implement file archiving.

   - Add SET REPEAT subcommand.

   - Improve Kermit-370 operation as a local Kermit.

   - Recover  from sudden line degradation by retransmitting partial pack-
     ets.

   - System-specific upgrades; see the respective chapters for details.

¢End of IK0KER.DOC|
